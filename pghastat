#!/bin/bash

# ---------------------------------------------------------------------------------------
# First rough go at this. Just getting things working will cleanup and use printf instead 
# for propper formatting
# ---------------------------------------------------------------------------------------

#
# Set a font color so repeated runds can be identified based on color
#

#bold=$(tput bold)
#normal=$(tput sgr0)

if [ "$#" -lt 1 ]; then
   echo "Please provide the instance name"
   exit
fi

name=$1

echo
echo -e "\tPlease wait while we gather some data ..."
echo -e "\tIf there are down systems, this could take a few minues"
echo

# get any running pg instance

pginstance=$(docker ps | grep pgha | grep $name | tail -1 | awk '{print $NF}')

if [ -z $pginstance ]; then
   echo "No instances found running"
   exit
fi

leader=$(docker exec -it $pginstance patronictl -c /pgha/config/patroni.conf list 2> /dev/null | grep -i leader |  awk '{print $2}')

active=$(docker exec -it $pginstance patronictl -c /pgha/config/patroni.conf list 2> /dev/null | grep -E 'running|streamin' | wc -l)

patronimembers=$(docker exec -it $leader patronictl -c /pgha/config/patroni.conf list | awk '{print $2}' | tr -d '' | grep $name | sort -u | paste -sd ' ' -)

patroniListCmd="docker exec -it $leader patronictl -c /pgha/config/patroni.conf list"

dc=$(docker exec -it $pginstance patronictl -c /pgha/config/patroni.conf list 2> /dev/null | grep -i leader |  awk '{print $2}' | awk -F "-" '{print $3}')

nodesindc=$(docker ps | grep pgha | grep "\-$dc-1" | awk '{print $NF}' | paste -sd ' ' -)  # The paste joins the lines together

numberofdc=$(docker ps | grep $name | awk '{print $12}' | awk -F"-" '{print $3}' | sort -u | wc -l)

dcname=$(docker ps | grep $name | awk '{print $12}' | awk -F"-" '{print $3}' | sort -u  | paste -sd ' ' - )

etcdHost=$(docker ps | grep "pgha-etcd" | tail -1 | awk '{print $NF}' )

etcdHosts=$(docker ps | grep "pgha-etcd" | awk '{print $NF}' )

# build the endpoints from etcd hosts
endpoint=""
for host in $etcdHosts; do
   if [ -z "$endpoint" ]; then
      endpoint="${host}:2379"
   else 
     endpoint="${endpoint},${host}:2379"
   fi
done


echo -e
echo -e "\tSummary ..."
echo -e
echo -e "\tInstance used to query env     : $pginstance"
echo -e "\tPatroni Leader                 : $leader"
echo -e "\tActive Patroni nodes           : $active"
echo -e "\tActive Patroni members         : $patronimembers"
echo -e "\tDC hosting Patroni Leader      : $dc"
echo -e "\tDocker containers in $dc       : $nodesindc"
echo -e "\tNumber of running data centers : $numberofdc"
echo -e "\tData center names              : $dcname"
echo -e 


echo -e 
echo -e 
echo -e "\t Patroni cluster ..."
echo -e 
$patroniListCmd | awk '{print "\t" $0 }'

netWorks=$(docker network ls | grep pgha | grep DC | awk '{ print $2}')
lastNetwork=$(echo $netWorks | awk '{print $NF}')
lastNetwork="${lastNetwork#dockerpgha_}"

numDc=$(echo $netWorks | wc -w)

# Get rid of non DC from list
numDc=$(( $numDc - 1 )) 

echo -e 
echo -e "\tNetwork ..."
echo -e 

for netWorkName in $netWorks; do
   details=$(docker network inspect $netWorkName --format='Subnet: {{range .IPAM.Config}}{{.Subnet}}{{end}}')
   # A way of removing prefix using parameter expression
   definedName="${netWorkName#dockerpgha_}" 
   networkDc=$(echo "$definedName" | sed -n 's/.*net\([0-9]\+\).*/\1/p')

   cleanName=$(echo $definedName | awk -F"-" '{print $3}' )

   if [ "$definedName" == "$lastNetwork" ];
   then
      echo -e "\t$cleanName (Non DC) network is $definedName  : $details"
   else 
      echo -e "\t$cleanName network is $definedName           : $details"
   fi
done
echo -e 



echo -e 
echo -e "\tetcd member health ..."
echo -e 

etcdStatusCmd="docker exec -it $etcdHost etcdctl --write-out=table --endpoints=$endpoint endpoint health  2> /dev/null"
$etcdStatusCmd | awk '{print "\t" $0 }'

echo -e 
echo -e "\tetcd status ..."
echo -e 

etcdStatusCmd="docker exec -it $etcdHost etcdctl --write-out=table --endpoints=$endpoint endpoint status 2> /dev/null"
$etcdStatusCmd | awk '{print "\t" $0 }'

