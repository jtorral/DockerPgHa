#!/bin/bash

# ---------------------------------------------------------------------------------------
# First rough go at this. Just getting things working will cleanup and use printf instead 
# for propper formatting
# ---------------------------------------------------------------------------------------

if [ "$#" -lt 1 ]; then
   echo "Please provide the instance name"
   exit
fi

name=$1

echo
echo "Please wait while we gather some data ..."
echo

# get any running pg instance

pginstance=$(docker ps | grep pgha | grep $name | tail -1 | awk '{print $NF}')

if [ -z $pginstance ]; then
   echo "No instances found running"
   exit
fi

leader=$(docker exec -it $pginstance patronictl -c /pgha/config/patroni.conf list | grep -i leader |  awk '{print $2}')

active=$(docker exec -it $pginstance patronictl -c /pgha/config/patroni.conf list | grep -E 'running|streamin' | wc -l)

dc=$(docker exec -it $pginstance patronictl -c /pgha/config/patroni.conf list | grep -i leader |  awk '{print $2}' | awk -F "-" '{print $3}')

nodesindc=$(docker ps | grep pgha | grep "\-$dc-1" | awk '{print $NF}' | paste -sd ' ' -)  # The paste joins the lines together


etcdHost=$(docker ps | grep "pgha-etcd" | tail -1 | awk '{print $NF}' )

etcdHosts=$(docker ps | grep "pgha-etcd" | awk '{print $NF}' )

# build the endpoints from etcd hosts
endpoint=""
for host in $etcdHosts; do
   if [ -z "$endpoint" ]; then
      endpoint="${host}:2379"
   else 
     endpoint="${endpoint},${host}:2379"
   fi
done


echo -e "\tInstance used to query env  : $pginstance"
echo -e "\tPatroni Leader              : $leader"
echo -e "\tActive Patroni nodes        : $active"
echo -e "\tDC hosting Patroni Leader   : $dc"
echo -e "\tDocker containers in DC     : $nodesindc"
echo -e 




echo -e 
echo -e "Patroni cluster details ...."
echo -e 
echo -e 
patroniInfo=$(docker exec -it $pginstance patronictl -c /pgha/config/patroni.conf list )
echo -e "$patroniInfo"
echo -e 



# Get network details
echo -e 
echo -e "Network details ...."
echo -e 
echo -e 
netWorks=$(docker network ls | grep pgha | awk '{ print $2}')
for netWorkName in $netWorks; do
   details=$(docker network inspect $netWorkName --format='Subnet: {{range .IPAM.Config}}{{.Subnet}}{{end}}')
   # A way of removing prefix using parameter expression
   definedName="${netWorkName#dockerpgha_}" 
   networkDc=$(echo "$definedName" | sed -n 's/.*net\([0-9]\+\).*/\1/p')
   echo -e "\tDC $networkDc network is $definedName     : $details"
done
echo -e 



echo -e 
echo -e "ETCD cluster details ...."
echo -e 
echo -e 
etcdStatusCmd="docker exec -it $etcdHost etcdctl --write-out=table --endpoints=$endpoint endpoint status"
$etcdStatusCmd
echo -e 

