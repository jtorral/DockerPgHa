#!/bin/bash


function getLeader() {
        Leader=$(curl -s http://localhost:8008/cluster  | jq -r '.members[] | select(.role=="leader") | .name')
}


function reinitCommands() {
        replicaList=$(curl -s http://localhost:8008/cluster  | jq -r '.members[] | select(.role=="replica") | .name')
        cluster=$(curl -s http://localhost:8008/cluster  | jq -r .scope )

        thisContainer="pgha-${thisHost}"

        printf "\n\n\n\n************* READ THIS *****************"
        printf "\n\nCopy these commands and shut down the replica containers before restarting %s\n" $thisContainer

        for node in $replicaList
        do
                container="pgha-${node}"
                printf "\n\tdocker stop %s" $container
        done

        printf "\n\nValidate all replicas are down and %s is running as the Leader\n" $thisHost
        printf "\n\tpatronictl -c ${CFG_DIR}/patroni.conf list\n"
        printf "\nBefore restarting %s.\n" $thisContainer
        printf "\n\tdocker restart %s \n" $thisContainer
        printf "\nWhen %s is back on line and running as a Leader again, restart the replicas.\n" $thisHost
        printf "\n\tdocker exec -it %s patronictl -c ${CFG_DIR}/patroni.conf list\n" $thisContainer
        printf "\nRestart the replicas\n"
        for node in $replicaList
        do
                container="pgha-${node}"
                printf "\n\tdocker start %s" $container
        done

        printf "\n\nIf there are error and the replica does not come online, you can reinitilaze them with the following commands.\n\n"
        printf "\t- Note:\n"
        printf "\t- Depending on the size of the database, this could take time.\n"
        printf "\t- Consider logging into the conatiner and checking the logs before reinitilizing.\n"
        printf "\t- You must run these from inside one of the containers\n"

        for node in $replicaList
        do
                printf "\n\tcurl -s http://%s:8008/reinitialize -XPOST -d '{\"force\":\"true\"}'" $node
        done

        printf "\n\n\tOr you can use the patronictl commands below.\n"

        for node in $replicaList
        do
                printf "\n\tpatronictl -c %s reinit %s %s --force" ${CFG_DIR}/patroni.conf $cluster $node
        done

        printf "\n\nIf you change your mind, remove the trigger file %s *****\n" $CFG_DIR/restoreme
}



function createTrigger() {

   sudo -u postgres touch ${CFG_DIR}/restoreme

   reinitCommands

   echo -e
   echo -e
   echo -e

}


cmd=$(echo  "pgbackrest --output=json --config=${CFG_DIR}/pgbackrest.conf --stanza=${STANZA_NAME} info  | jq -r .[].repo[].status.message | grep \"no valid backups\" | wc -l")

backupExists=$(runuser -l postgres -c "$cmd")

if [ $backupExists -eq 1 ]; then
        printf "\n\n\nThere are no backups in the repoistory.\n\nExiting\n\n"
        exit
fi

thisHost=$(hostname)
Leader=$(curl -s http://localhost:8008/cluster  | jq -r '.members[] | select(.role=="leader") | .name')

if [ "${Leader}" != "${thisHost}" ]; then
      printf "\n\n\n\n\nThis (%s) is not the Leader (%s). Run command on (%s) or promote (%s) to a Leader and try again.\n" $thisHost $Leader $Leader $thisHost
      printf "\n\nThe REST API call below will promote %s to a Leader without prompting. " $thisHost
      printf "\n\n\tcurl -s http://localhost:8008/switchover -XPOST -d '{\"leader\":\"%s\", \"candidate\":\"%s\"}'" $Leader $thisHost
      printf "\n\nOr you can you patronictl with prompts."
      printf "\n\n\tpatronictl -c %s/patroni.conf switchover --leader=%s --candidate=%s" ${CFG_DIR} $Leader $thisHost

      printf "\n\nExiting ..\n\n"
      exit 1
fi


printf  "\n\nMake sure you have a backup before resarting this container if you answer yes below\n\n"
read -p "Create ${CFG_DIR}/restoreme ? This will force a database restore when the container is restarted. (yes/no) " yn
echo -e

case $yn in
        yes ) createTrigger;;
        no ) printf "\nExit\n\n"
                exit 0;;
        * ) printf "\nInvalid response. \"yes\" or \"no\" required. Exiting.\n\n"
                exit 1;;
esac

echo -e
